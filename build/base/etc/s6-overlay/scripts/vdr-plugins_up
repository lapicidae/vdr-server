#!/command/with-contenv bash
# shellcheck shell=bash


AUR="${AUR:-"true"}"
UNINSTALL_PLUGINS="${UNINSTALL_PLUGINS:-"false"}"
NO_INET="${NO_INET:-"false"}"

if [ -z "$PLUGINS" ]; then
	PLUGINS="epgsearch live streamdev-server vnsiserver"
	printf 'Using default VDR-Plugins: %s\n' "$PLUGINS"
fi

if [ "$AUR" = 'false' ]; then
	pac_man='pacman'
	installer="$pac_man"
else
	bUser='builduser'
	pac_man='paru'
	installer="sudo -u ${bUser} ${pac_man} --nouseask --removemake --cleanafter"
fi

mapfile -t enabled_arr < <(vdrctl list --enabled)
read -ra plug_arr <<<"${PLUGINS,,}"


# plugins added by user
uplug_conf='/etc/conf.d/user_plugins.conf'

if [ -f "$uplug_conf" ]; then
	while read -r uplug; do
		if [[ "$uplug" =~ ^#.*$ ]]; then
			continue
		else
			printf 'User VDR-Plugin "%s" was recognized...\n' "$uplug"
			plug_arr+=("$uplug")
		fi
	done < "$uplug_conf"
fi


# live plugin handling
if [[ ! "${plug_arr[*]}" =~ 'live' ]] && [ "$DISABLE_WEBINTERFACE" != 'true' ]; then
	printf 'Keep live plugin enabled...\n'
	plug_arr+=('live')
elif [[ "${plug_arr[*]}" =~ "live" ]] && [ "$DISABLE_WEBINTERFACE" = 'true' ]; then
	printf 'VDR-Plugin live is disabled via the environment variable "DISABLE_WEBINTERFACE=true"!\n'
	# delete plugin live from array
	for i in "${!plug_arr[@]}"; do
		if [[ ${plug_arr[i]} = 'live' ]]; then
			unset 'plug_arr[i]'
		fi
	done
fi


_isAvailable() {
	local plugin=$1;
	if $pac_man -Ssq "$plugin" 2> /dev/null | grep -q "^$plugin$"; then
		printf '0'	# Success
	else
		printf '1'	# Error
	fi
}

_isInstalled() {
	local package=$1
	$pac_man -Qi "$package" &> /dev/null
	printf '%s' $?
}

_isEnabled() {
	local plugin=$1;
	if vdrctl list --enabled | grep -q "^$plugin$"; then
		printf '0'	# Success
	else
		printf '1'	# Error
	fi
}


for en_plug in  "${enabled_arr[@]}"; do
	# Plugin not in array but enabled
	if [[ ! "${plug_arr[*]}" =~ $en_plug ]]; then
		vdrctl disable "$en_plug" && \
		  printf 'Plugin %s disabled.\n' "$en_plug"
		if [ "$UNINSTALL_PLUGINS" = 'true' ]; then
			printf 'VDR-Plugin %s not uninstalled!\n' "$en_plug"
			printf 'Uninstalling VDR-Plugins is currently not supported...\n'
		fi
	fi
done


for plug in  "${plug_arr[@]}"; do
	pacname="vdr-$plug"

	# Plugin installed
	if [ "$(_isInstalled "$pacname")" = '0' ]; then
		plg_inst='true'
	else
		plg_inst='false'
		printf 'VDR-Plugin %s is not installed.\n' "$plug"
	fi

	# Plugin enabled
	if [ "$(_isEnabled "$plug")" = '0' ]; then
		plg_enabled='true'
	else
		plg_enabled='false'
		printf 'VDR-Plugin %s is not enabled.\n' "$plug"
	fi

	# No Internet Connection
	if [ "$NO_INET" != 'true' ]; then
		# Plugin available
		if [ "$(_isAvailable "$pacname")" = '0' ]; then
			plg_avail='true'
		else
			plg_avail='false'
			printf 'VDR-Plugin %s is not available in repository!\n' "$plug"
		fi

		# Plugin not installed but available
		if [ $plg_inst != 'true' ] && [ $plg_avail = 'true' ]; then
			# use "overwrite" because of busybox
			$installer -S --overwrite '/usr/bin/*' --noprogressbar --noconfirm "$pacname" && \
			 plg_inst='true'		# mark as installed if successful
		fi
	fi

	# Plugin (not) installed and dis/enabled
	if [ $plg_inst = 'true' ] && [ "$plg_enabled" = 'false' ]; then
		vdrctl enable "$plug" && \
		printf 'VDR-Plugin %s enabled.\n' "$plug"
	elif [ $plg_inst = 'false' ] && [ "$plg_enabled" = 'true' ]; then
		vdrctl disable "$plug" && \
		printf 'VDR-Plugin %s disabled.\n' "$plug"
	fi

	unset plg_avail plg_enabled plg_inst
done
