#!/command/with-contenv bash
# shellcheck shell=bash


# quit if AUR is disabled
if [ "$AUR" = "false" ]; then
	echo "AUR is disabled!"
	exit 0
fi


# read pkg extension
makepkg_conf="/etc/makepkg.conf"

if [ -f "$makepkg_conf" ]; then
	pacext=$(grep -v "^#" "$makepkg_conf" | grep -w "^PKGEXT=" | cut -d "=" -f 2 | tr -d "'")
	if [ -z "$pacext" ]; then
		echo "Package extension not found, use default: '.pkg.tar.zst'"
		pacext=".pkg.tar.zst"
	fi
fi


bUser="builduser"
pkgb_dir="/etc/PKGBUILD.d"
buildDir="/var/cache/paru/user_pkg"
vdrplug_conf="/etc/conf.d/user_plugins.conf"
pacbuild="sudo -u $bUser makepkg --clean --install --noconfirm --noprogressbar --syncdeps --rmdeps"
pacinst="paru --nouseask --noconfirm --noprogressbar --overwrite ´/usr/bin/*´ -U *$pacext"


# array of subdirs sorted alphabetically
mapfile -t package < <(find "$pkgb_dir/" -mindepth 1 -maxdepth 1 -type d | LC_ALL=C sort -f)


for DIR in  "${package[@]}"; do

	pacname=$(basename "$DIR")
	dirmd5=$(find "$DIR" -type f \( ! -iname "rebuild" \) | LC_ALL=C sort | tar --mode="664" --owner="65534" --group="65534" -cf - -T - 2>/dev/null | md5sum | cut -d " " -f 1)

	echo "****** USER PACKAGE: $pacname ******"

	# detox dir name
	pacname=$(echo "$pacname" | sed -e 's/[^A-Za-z0-9._-]/_/g' | sed 's/^_//g' | sed 's/_$//g')
	pacdir="$buildDir/$pacname"
	md5file="$pacdir/md5sum"


	# skip if md5sum matches or if PKGBUILD is missing
	if [ -f "$md5file" ] && [ "$dirmd5" = "$(cat "$md5file" 2>/dev/null)" ] && [ ! -f "$DIR/rebuild" ]; then
		echo "Nothing to do!"
		continue
	elif [ ! -f "$DIR/PKGBUILD" ]; then
		echo "Missing PKGBUILD file!"
		continue
	fi


	if [ ! -d "$pacdir" ]; then
		echo "create build dir..."
		mkdir -p "$pacdir"
		chown -R $bUser:users "$buildDir"
	else
		echo "clear build dir..."
		rm -rf "${pacdir:?}/"{*,.*} 2>/dev/null
	fi

	echo "copy to build dir..."
	cp -a "$DIR/." "$pacdir/"
	chown -R $bUser:users "$pacdir"
	cd "$pacdir" || exit 1

	if [ -f "$DIR/forcedeps" ]; then
		echo "force install dependencies..."
		mapfile -t mkdeps < <(< "$pacdir/PKGBUILD" awk "/.*makedepends=\(/,/\)/" | sed "s/makedepends=(//g" | sed "s/)//g" | xargs -n 1)
		pacman -S --overwrite "/usr/bin/*" --needed --asdeps --noconfirm "${mkdeps[@]}"
		forcedeps="true"
	fi

	echo "build package..."
	$pacbuild || continue

	echo "install package..."
	$pacinst || continue

	echo "cleanup..."
	rm -rf "${pacdir:?}/"{*,.*} 2>/dev/null
	rm -f "$DIR/rebuild"
	echo "$dirmd5" > "$md5file"
	if [ ${forcedeps:="false"} = "true" ]; then
		pacman --noconfirm -R "$(pacman -Qtdq)" 2>/dev/null || true
	fi


	# enable VDR plugin if control file exists
	#if [ 0 -lt "$(ls "$DIR/vdrplug-"* 2>/dev/null | wc -w)" ]; then
	if [ 0 -lt "$(find "$DIR" -maxdepth 1 -type f -name 'vdrplug-*' 2>/dev/null | wc -w)" ]; then
		vdrplug=$(find "$DIR" -maxdepth 1 -type f -name "vdrplug-*" -exec basename {} \; | LC_ALL=C sort -f | head -n 1 | sed 's/^vdrplug-//')
		if ! grep -q "$vdrplug" "$vdrplug_conf"; then
			echo "enable vdr-plugin $vdrplug..."
			echo "$vdrplug" >> "$vdrplug_conf"
			# only enable if disabled
			enabled=$(vdrctl list --enabled | grep "^epg2vdr$" &>/dev/null && echo "true")
			if [ "$enabled" != "true" ]; then
				vdrctl enable "$vdrplug" && \
				echo "VDR-Plugin $vdrplug enabled."
			fi
		fi
	fi

done
